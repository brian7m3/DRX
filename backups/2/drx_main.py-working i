#!/usr/bin/env python3

import os
import sys
import time
import threading
import configparser
import serial
import curses
import subprocess
import random
import re
import RPi.GPIO as GPIO
import datetime
import traceback
import wave
import contextlib
import shutil
import itertools
import json
import string

SCRIPT_NAME = "DRX"
VERSION = "2.09-cos-i-allfeatures"

STATE_FILE = '/tmp/drx_state.json'
WEBCMD_FILE = '/tmp/drx_webcmd.json'
LOG_WEB_FILE = '/tmp/drx_webconsole.log'

serial_buffer = ""
serial_history = []
currently_playing = ""
currently_playing_info = ""
currently_playing_info_timestamp = 0
playing_end_time = 0
playback_status = ""

serial_port_missing = False
sound_card_missing = False

script_dir = os.path.dirname(os.path.realpath(__file__))
config_file_path = os.path.join(script_dir, 'config.ini')
log_file_path = os.path.join(script_dir, 'drx_error.log')

DEFAULTS = {
    "Sound": {
        "directory": "/tmp/sounds",
        "extension": ".wav",
        "device": "default"
    },
    "GPIO": {
        "cos_pin": 23,
        "cos_activate_level": True,
        "remote_busy_pin": 25,
        "remote_busy_activate_level": True,
        "cos_debounce_time": 0.5,
        "max_cos_interruptions": 3
    },
    "Serial": {
        "port": "/dev/ttyUSB0",
        "baudrate": 9600,
        "timeout": 0.5
    },
    "Random": {
        "base": "3000",
        "end": "3099",
        "interval": "10"
    },
    "Rotation": {
        "base": "4000",
        "end": "4099",
        "time": "10"
    },
    "SudoRandom": {
        "base": "5000",
        "end": "5099",
        "interval": "10"
    },
    "Direct": {
        "enabled": "true",
        "prefix": "P"
    }
}
config_warnings = []

def log_error(msg):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    try:
        with open(log_file_path, 'a') as f:
            f.write(f"[{timestamp}] {msg}\n")
    except Exception:
        print(f"[{timestamp}] Logging failed: {msg}")

def log_exception(context: str):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    exc = traceback.format_exc()
    try:
        with open(log_file_path, 'a') as f:
            f.write(f"[{timestamp}] Exception in {context}:\n{exc}\n")
    except Exception:
        print(f"[{timestamp}] Logging failed: {exc}")

def log_recent(entry):
    ts = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
    try:
        with open(LOG_WEB_FILE, "a") as f:
            f.write(f"{ts}: {entry}\n")
    except Exception:
        print(f"Failed to write log: {entry}")

def get_config_value(section, key, fallback=None, cast_func=None, warn=None):
    global config_warnings
    if not config.has_section(section):
        config_warnings.append(f"Section [{section}] missing; using defaults.")
        val = DEFAULTS[section][key] if section in DEFAULTS and key in DEFAULTS[section] else fallback
        return cast_func(val) if cast_func else val
    if not config.has_option(section, key):
        config_warnings.append(f"Missing {key} in [{section}]; using default '{DEFAULTS.get(section, {}).get(key, fallback)}'.")
        val = DEFAULTS[section][key] if section in DEFAULTS and key in DEFAULTS[section] else fallback
        return cast_func(val) if cast_func else val
    raw = config[section][key]
    try:
        return cast_func(raw) if cast_func else raw
    except Exception as e:
        config_warnings.append(f"Invalid value for {key} in [{section}]: '{raw}' ({e}); using default '{DEFAULTS.get(section, {}).get(key, fallback)}'.")
        val = DEFAULTS[section][key] if section in DEFAULTS and key in DEFAULTS[section] else fallback
        return cast_func(val) if cast_func else val

def parse_int_list(s, fallback=10, label="", section=""):
    vals = []
    for i, v in enumerate(s.split(',')):
        try:
            if float(v) != int(float(v)):
                config_warnings.append(f"{label} in [{section}]: '{v}' not integer, using {fallback}.")
                vals.append(int(fallback))
            else:
                vals.append(int(float(v)))
        except Exception:
            config_warnings.append(f"{label} in [{section}]: '{v}' invalid, using {fallback}.")
            vals.append(int(fallback))
    return vals

def parse_float_list(s, fallback=10, label="", section=""):
    vals = []
    for i, v in enumerate(s.split(',')):
        try:
            f = float(v)
            if f < 1:
                config_warnings.append(f"{label} in [{section}]: '{v}' < 1, using {fallback}.")
                f = float(fallback)
            elif f != int(f):
                config_warnings.append(f"{label} in [{section}]: '{v}' not integer, using {fallback}.")
                f = float(fallback)
            vals.append(int(f))
        except Exception:
            config_warnings.append(f"{label} in [{section}]: '{v}' invalid, using {fallback}.")
            vals.append(int(fallback))
    return vals

config = configparser.ConfigParser()
config_ini_missing = False
try:
    found_files = config.read(config_file_path)
    if not found_files:
        config_ini_missing = True
        config_warnings.insert(0, f"config.ini missing at {config_file_path}; using all default values.")
except Exception as e:
    config_ini_missing = True
    config_warnings.insert(0, f"Failed to read config.ini: {e}; using all default values.")

SOUND_DIRECTORY = get_config_value("Sound", "directory", DEFAULTS["Sound"]["directory"])
SOUND_FILE_EXTENSION = get_config_value("Sound", "extension", DEFAULTS["Sound"]["extension"])
SOUND_DEVICE = get_config_value("Sound", "device", DEFAULTS["Sound"]["device"])

COS_PIN = get_config_value("GPIO", "cos_pin", DEFAULTS["GPIO"]["cos_pin"], int)
COS_ACTIVE_LEVEL = get_config_value("GPIO", "cos_activate_level", DEFAULTS["GPIO"]["cos_activate_level"], lambda x: str(x).lower() in ('1', 'true', 'yes'))
REMOTE_BUSY_PIN = get_config_value("GPIO", "remote_busy_pin", DEFAULTS["GPIO"]["remote_busy_pin"], int)
REMOTE_BUSY_ACTIVE_LEVEL = get_config_value("GPIO", "remote_busy_activate_level", DEFAULTS["GPIO"]["remote_busy_activate_level"], lambda x: str(x).lower() in ('1', 'true', 'yes'))
COS_DEBOUNCE_TIME = get_config_value("GPIO", "cos_debounce_time", DEFAULTS["GPIO"]["cos_debounce_time"], float)
MAX_COS_INTERRUPTIONS = get_config_value("GPIO", "max_cos_interruptions", DEFAULTS["GPIO"]["max_cos_interruptions"], int)

SERIAL_PORT = get_config_value("Serial", "port", DEFAULTS["Serial"]["port"])
SERIAL_BAUDRATE = get_config_value("Serial", "baudrate", DEFAULTS["Serial"]["baudrate"], int)
SERIAL_TIMEOUT = get_config_value("Serial", "timeout", DEFAULTS["Serial"]["timeout"], float)

RANDOM_BASES = parse_int_list(get_config_value("Random", "base", DEFAULTS["Random"]["base"]), fallback=3000, label="Random base", section="Random")
RANDOM_ENDS = parse_int_list(get_config_value("Random", "end", DEFAULTS["Random"]["end"]), fallback=3099, label="Random end", section="Random")
RANDOM_INTERVALS = parse_float_list(get_config_value("Random", "interval", DEFAULTS["Random"]["interval"]), fallback=10, label="Random interval", section="Random")

ROTATION_BASES = parse_int_list(get_config_value("Rotation", "base", DEFAULTS["Rotation"]["base"]), fallback=4000, label="Rotation base", section="Rotation")
ROTATION_ENDS = parse_int_list(get_config_value("Rotation", "end", DEFAULTS["Rotation"]["end"]), fallback=4099, label="Rotation end", section="Rotation")
ROTATION_TIMES = parse_float_list(get_config_value("Rotation", "time", DEFAULTS["Rotation"]["time"]), fallback=10, label="Rotation time", section="Rotation")

SUDORANDOM_BASES = parse_int_list(get_config_value("SudoRandom", "base", DEFAULTS["SudoRandom"]["base"]), fallback=5000, label="SudoRandom base", section="SudoRandom")
SUDORANDOM_ENDS = parse_int_list(get_config_value("SudoRandom", "end", DEFAULTS["SudoRandom"]["end"]), fallback=5099, label="SudoRandom end", section="SudoRandom")
SUDORANDOM_INTERVALS = parse_float_list(get_config_value("SudoRandom", "interval", DEFAULTS["SudoRandom"]["interval"]), fallback=10, label="SudoRandom interval", section="SudoRandom")

DIRECT_ENABLED = get_config_value("Direct", "enabled", DEFAULTS["Direct"]["enabled"], lambda x: str(x).lower() in ("1", "true", "yes"))
DIRECT_PREFIX = get_config_value("Direct", "prefix", DEFAULTS["Direct"]["prefix"])

GPIO.setmode(GPIO.BCM)
GPIO.setup(REMOTE_BUSY_PIN, GPIO.OUT)
GPIO.output(REMOTE_BUSY_PIN, not REMOTE_BUSY_ACTIVE_LEVEL)
GPIO.setup(COS_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)

try:
    serial_port = serial.Serial(
        port=SERIAL_PORT,
        baudrate=SERIAL_BAUDRATE,
        timeout=SERIAL_TIMEOUT
    )
except Exception:
    serial_port = None
    serial_port_missing = True

random_last_played = {}
random_current_track = {}
rotation_last_played = {}
rotation_current_track = {}

sudo_random_last_interval = {}
sudo_random_interval_track = {}
sudo_random_played_in_cycle = {}

playback_interrupt = threading.Event()
playback_lock = threading.Lock()
current_playback_thread = None

def is_cos_active():
    try:
        with open("/tmp/cos_force", "r") as f:
            return f.read().strip() == "1"
    except Exception:
        try:
            level = GPIO.input(COS_PIN)
            return (level == COS_ACTIVE_LEVEL)
        except Exception:
            return False

def find_matching_files(base, end):
    files = []
    try:
        for track_num in range(base + 1, end + 1):
            pattern1 = f"{track_num:04d}-"
            pattern2 = f"{track_num:04d}."
            matching = [f for f in os.listdir(SOUND_DIRECTORY)
                        if (f.startswith(pattern1) or f.startswith(pattern2) or f.startswith(f"{track_num:04d}")) and f.endswith(SOUND_FILE_EXTENSION)]
            files.extend([os.path.join(SOUND_DIRECTORY, f) for f in matching])
    except Exception:
        pass
    return files

def play_in_thread(target, *args, **kwargs):
    global current_playback_thread
    playback_interrupt.set()
    if current_playback_thread and current_playback_thread.is_alive():
        current_playback_thread.join(timeout=2.0)
    t = threading.Thread(target=target, args=args, kwargs=kwargs, daemon=True)
    current_playback_thread = t
    t.start()

def play_interruptible(filename):
    log_recent(f"[I] Play {os.path.basename(filename)} (COS interruptible)")
    proc = subprocess.Popen(['aplay', '-D', SOUND_DEVICE, filename])
    while proc.poll() is None:
        if is_cos_active():
            log_recent("[I] COS went ACTIVE, stopping file.")
            proc.terminate()
            break
        time.sleep(0.05)
    if proc.poll() is None:
        proc.kill()
    proc.wait()
    log_recent("[I] Playback complete.")

def play_plain(filename):
    log_recent(f"[PLAIN] Play {os.path.basename(filename)} (no COS interrupt)")
    proc = subprocess.Popen(['aplay', '-D', SOUND_DEVICE, filename])
    proc.wait()
    log_recent("[PLAIN] Playback complete.")

def play_randomized_section(base, end, interval):
    now = time.time()
    last = random_last_played.get(base, 0)
    current = random_current_track.get(base, None)
    matching_files = find_matching_files(base, end)
    if not matching_files:
        log_recent(f"[RANDOM] No files for {base}-{end}")
        return
    if now - last >= interval * 60 or current not in matching_files:
        new_track = random.choice(matching_files)
        random_current_track[base] = new_track
        random_last_played[base] = now
    else:
        new_track = current
    play_in_thread(play_plain, new_track)

def play_rotating_section(base, end, interval):
    now = time.time()
    last = rotation_last_played.get(base, 0)
    current_num = rotation_current_track.get(base, base + 1)
    available_tracks = []
    for track_num in range(base + 1, end + 1):
        base_filename_prefix = f"{track_num:04d}"
        matching_files = [f for f in os.listdir(SOUND_DIRECTORY)
                          if (f.startswith(f"{base_filename_prefix}-") or f.startswith(f"{base_filename_prefix}.") or f.startswith(base_filename_prefix)) and f.endswith(SOUND_FILE_EXTENSION)]
        if matching_files:
            available_tracks.append(track_num)
    if not available_tracks:
        log_recent(f"[ROTATION] No files for {base}-{end}")
        return
    if base not in rotation_current_track or rotation_current_track[base] not in available_tracks:
        current_track_num = available_tracks[0]
    else:
        current_track_num = rotation_current_track[base]
    if last == 0:
        next_track_num = current_track_num
    elif now - last >= interval * 60:
        idx = available_tracks.index(current_track_num) if current_track_num in available_tracks else 0
        next_idx = (idx + 1) % len(available_tracks)
        next_track_num = available_tracks[next_idx]
    else:
        next_track_num = current_track_num
    base_filename_prefix = f"{next_track_num:04d}"
    matching_files = [f for f in os.listdir(SOUND_DIRECTORY)
                      if (f.startswith(f"{base_filename_prefix}-") or f.startswith(f"{base_filename_prefix}.") or f.startswith(base_filename_prefix)) and f.endswith(SOUND_FILE_EXTENSION)]
    if not matching_files:
        log_recent(f"[ROTATION] No files for {base}-{end} at track {next_track_num}")
        return
    next_track = os.path.join(SOUND_DIRECTORY, matching_files[0])
    rotation_current_track[base] = next_track_num
    rotation_last_played[base] = now
    play_in_thread(play_plain, next_track)

def play_sudo_random_section(base, end, interval):
    now = time.time()
    matching_files = find_matching_files(base, end)
    if not matching_files:
        log_recent(f"[SUDORANDOM] No files for {base}-{end}")
        return
    last_interval = sudo_random_last_interval.get(base, 0)
    current_track = sudo_random_interval_track.get(base)
    played_in_cycle = sudo_random_played_in_cycle.get(base, set())
    if current_track is not None and (now - last_interval < interval * 60) and current_track in matching_files:
        file_to_play = current_track
    else:
        unused_tracks = [t for t in matching_files if t not in played_in_cycle]
        if not unused_tracks:
            played_in_cycle = set()
            unused_tracks = matching_files[:]
        new_track = random.choice(unused_tracks)
        file_to_play = new_track
        sudo_random_interval_track[base] = file_to_play
        sudo_random_last_interval[base] = now
        played_in_cycle.add(file_to_play)
        sudo_random_played_in_cycle[base] = played_in_cycle
    play_in_thread(play_plain, file_to_play)

def parse_serial_command(command):
    log_recent(f"[DEBUG] parse_serial_command: {command}")
    m = re.match(r'^P(\d{4})i(\d{4})$', command)
    if m:
        log_recent(f"[DEBUG] parse_serial_command: i-mode matched {m.group(1)} {m.group(2)}")
        return (m.group(1), 'i', m.group(2))
    m = re.match(r'^P(\d{4})([IRP]?)$', command)
    if m:
        log_recent(f"[DEBUG] parse_serial_command: suffix-mode matched {m.group(1)} {m.group(2)}")
        return (m.group(1), m.group(2), None)
    log_recent(f"[DEBUG] parse_serial_command: no match")
    return (None, None, None)

def process_command(command):
    global current_playback_thread
    log_recent(f"[DEBUG] Received command: {command}")
    code_str, suffix, alt_code = parse_serial_command(command.strip())
    log_recent(f"[DEBUG] Decoded command: code_str={code_str}, suffix={suffix}, alt_code={alt_code}")
    if code_str is None:
        log_recent(f"[DEBUG] code_str is None, returning")
        return

    # COS-i sequence logic
    if suffix == 'i' and alt_code is not None:
        log_recent(f"[COS-i] Handling P{code_str}i{alt_code}")

        filename1 = os.path.join(SOUND_DIRECTORY, f"{code_str}{SOUND_FILE_EXTENSION}")
        filename2 = os.path.join(SOUND_DIRECTORY, f"{alt_code}{SOUND_FILE_EXTENSION}")

        def cos_two_stage():
            log_recent(f"[COS-i] Step 1: Play {os.path.basename(filename1)} (COS interruptible)")
            proc = subprocess.Popen(['aplay', '-D', SOUND_DEVICE, filename1])
            cos_triggered = False
            while proc.poll() is None:
                if is_cos_active():
                    log_recent("[COS-i] COS went ACTIVE, stopping 1st file.")
                    proc.terminate()
                    cos_triggered = True
                    break
                time.sleep(0.05)
            if proc.poll() is None:
                proc.kill()
            proc.wait()
            if not cos_triggered:
                log_recent("[COS-i] 1st file ended before COS triggered; sequence complete.")
                return
            log_recent("[COS-i] Step 2: Wait for COS to go INACTIVE...")
            while is_cos_active():
                time.sleep(0.05)
            log_recent(f"[COS-i] Step 3: Play {os.path.basename(filename2)} (UNinterruptible)")
            proc2 = subprocess.Popen(['aplay', '-D', SOUND_DEVICE, filename2])
            proc2.wait()
            log_recent("[COS-i] Sequence complete.")

        play_in_thread(cos_two_stage)
        return

    # Random/Rotation/SudoRandom logic
    code = int(code_str)
    for b, e, t in zip(RANDOM_BASES, RANDOM_ENDS, RANDOM_INTERVALS):
        if code == b:
            play_randomized_section(b, e, t)
            return
        elif b < code <= e:
            filename = os.path.join(SOUND_DIRECTORY, f"{code:04d}{SOUND_FILE_EXTENSION}")
            play_in_thread(play_plain, filename)
            return
    for b, e, t in zip(ROTATION_BASES, ROTATION_ENDS, ROTATION_TIMES):
        if code == b:
            play_rotating_section(b, e, t)
            return
        elif b < code <= e:
            filename = os.path.join(SOUND_DIRECTORY, f"{code:04d}{SOUND_FILE_EXTENSION}")
            play_in_thread(play_plain, filename)
            return
    for b, e, t in zip(SUDORANDOM_BASES, SUDORANDOM_ENDS, SUDORANDOM_INTERVALS):
        if code == b:
            play_sudo_random_section(b, e, t)
            return
        elif b < code <= e:
            filename = os.path.join(SOUND_DIRECTORY, f"{code:04d}{SOUND_FILE_EXTENSION}")
            play_in_thread(play_plain, filename)
            return

    # Simple I mode
    if suffix == 'I':
        filename = os.path.join(SOUND_DIRECTORY, f"{code_str}{SOUND_FILE_EXTENSION}")
        play_in_thread(play_interruptible, filename)
        return

    # Plain play
    filename = os.path.join(SOUND_DIRECTORY, f"{code_str}{SOUND_FILE_EXTENSION}")
    play_in_thread(play_plain, filename)

def serial_read_loop():
    buf = ""
    while True:
        if serial_port and serial_port.in_waiting:
            data = serial_port.read(serial_port.in_waiting)
            try:
                decoded = data.decode('ascii')
                buf += decoded
                while True:
                    m = re.search(r'P\d{4}i\d{4}|P\d{4}[IRP]?', buf)
                    if not m:
                        break
                    cmd = m.group(0)
                    process_command(cmd)
                    buf = buf[m.end():]
            except Exception as e:
                log_recent(f"[DEBUG] serial decode error: {e}")
        time.sleep(0.1)

def maybe_run_webcmd():
    if os.path.exists(WEBCMD_FILE):
        try:
            with open(WEBCMD_FILE, 'r') as f:
                cmd = json.load(f)
            if cmd.get("type") == "play":
                input_cmd = cmd.get("input", "")
                process_command(input_cmd)
            elif cmd.get("type") == "stop":
                playback_interrupt.set()
                if current_playback_thread and current_playback_thread.is_alive():
                    current_playback_thread.join(timeout=1.0)
                log_recent("Playback stopped from web")
            os.remove(WEBCMD_FILE)
        except Exception:
            log_exception("maybe_run_webcmd")

def bg_write_state_and_webcmd_loop():
    while True:
        maybe_run_webcmd()
        time.sleep(0.25)

if __name__ == "__main__":
    log_recent(f"{SCRIPT_NAME} v{VERSION} started.")
    threading.Thread(target=serial_read_loop, daemon=True).start()
    threading.Thread(target=bg_write_state_and_webcmd_loop, daemon=True).start()
    print("DRX running. Send P5308i5307, PxxxxI, Pxxxx, P3000, P4000, etc. See drx_webconsole.log for debug output.")
    try:
        while True:
            time.sleep(10)
    except KeyboardInterrupt:
        pass
    finally:
        GPIO.cleanup()