#!/usr/bin/env python3

import os
import sys
import time
import threading
import serial
import subprocess
import re
import RPi.GPIO as GPIO
import wave
import contextlib
import curses
import time

# --- Config ---
SOUND_DIRECTORY = "/home/brian/DRX/sounds"
SOUND_FILE_EXTENSION = ".wav"
SOUND_DEVICE = "plughw:2,0"

COS_PIN = 16
COS_ACTIVE_LEVEL = False
REMOTE_BUSY_PIN = 20
REMOTE_BUSY_ACTIVE_LEVEL = False
SERIAL_PORT = "/dev/ttyUSB0"
SERIAL_BAUDRATE = 57600
SERIAL_TIMEOUT = 0.5

MAX_COS_INTERRUPTIONS = 3

# --- State ---
serial_buffer = ""
serial_history = []
currently_playing = ""
playback_lock = threading.Lock()
playback_interrupt = threading.Event()
current_playback_thread = None
current_playback_token = None

# --- GPIO Setup ---
GPIO.setmode(GPIO.BCM)
GPIO.setup(REMOTE_BUSY_PIN, GPIO.OUT)
GPIO.output(REMOTE_BUSY_PIN, not REMOTE_BUSY_ACTIVE_LEVEL)
GPIO.setup(COS_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)

def is_cos_active():
    try:
        return GPIO.input(COS_PIN) == COS_ACTIVE_LEVEL
    except Exception:
        return False

def match_code_file(f, code_str, ext):
    ext = ext.lower()
    f_lower = f.lower()
    return f_lower == f"{code_str}{ext}" or (f_lower.startswith(f"{code_str}-") and f_lower.endswith(ext))

def get_duration_wav(fname):
    try:
        with contextlib.closing(wave.open(fname, 'r')) as f:
            frames = f.getnframes()
            rate = f.getframerate()
            return frames / float(rate)
    except Exception:
        return 0

def launch_playback_thread(play_func, *args, **kwargs):
    global current_playback_thread, current_playback_token, playback_lock, playback_interrupt
    with playback_lock:
        if current_playback_thread and current_playback_thread.is_alive():
            if threading.current_thread() is not current_playback_thread:
                playback_interrupt.set()
                current_playback_thread.join(timeout=2)
        playback_interrupt.clear()
        token = object()
        current_playback_token = token
        def wrapper():
            play_func(*args, playback_token=token, **kwargs)
        t = threading.Thread(target=wrapper, daemon=True)
        current_playback_thread = t
        t.start()

def play_sound(filename, interruptible=False, repeat=False, pausing=False, playback_token=None):
    global currently_playing, playback_interrupt, current_playback_token
    max_interrupts = MAX_COS_INTERRUPTIONS
    cos_interrupts = 0
    currently_playing = os.path.basename(filename)
    GPIO.output(REMOTE_BUSY_PIN, REMOTE_BUSY_ACTIVE_LEVEL)
    # print("RDB ACTIVE")  # For debugging
    try:
        if repeat:
            while True:
                if playback_token is not None and playback_token != current_playback_token:
                    break
                interrupted = False
                allow_interrupt = cos_interrupts < max_interrupts
                try:
                    proc = subprocess.Popen(
                        ['aplay', '-D', SOUND_DEVICE, filename],
                        stdout=subprocess.DEVNULL,
                        stderr=subprocess.DEVNULL
                    )
                except Exception:
                    break
                try:
                    while proc.poll() is None:
                        if playback_token is not None and playback_token != current_playback_token:
                            proc.terminate()
                            break
                        if allow_interrupt and interruptible and is_cos_active():
                            proc.terminate()
                            time.sleep(0.2)
                            if proc.poll() is None:
                                proc.kill()
                            cos_interrupts += 1
                            interrupted = True
                            while is_cos_active() and not playback_interrupt.is_set():
                                if playback_token is not None and playback_token != current_playback_token:
                                    break
                                time.sleep(0.05)
                            break
                        if playback_interrupt.is_set():
                            proc.terminate()
                            break
                        time.sleep(0.05)
                finally:
                    if proc.poll() is None:
                        proc.kill()
                    proc.wait()
                if interrupted and cos_interrupts < max_interrupts and not playback_interrupt.is_set():
                    continue
                break
        elif pausing:
            total_duration = get_duration_wav(filename)
            played_duration = 0
            while played_duration < total_duration:
                if playback_token is not None and playback_token != current_playback_token:
                    break
                sox_cmd = [
                    'sox', filename, '-t', 'wav', '-', 'trim', f'{played_duration}'
                ]
                try:
                    proc1 = subprocess.Popen(sox_cmd, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
                    proc2 = subprocess.Popen(['aplay', '-D', SOUND_DEVICE], stdin=proc1.stdout, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    proc1.stdout.close()
                except Exception:
                    break
                interrupted = False
                start_time = time.time()
                while proc2.poll() is None:
                    if playback_token is not None and playback_token != current_playback_token:
                        proc2.terminate()
                        proc1.terminate()
                        break
                    if interruptible and is_cos_active():
                        if cos_interrupts < max_interrupts:
                            proc2.terminate()
                            proc1.terminate()
                            time.sleep(0.1)
                            if proc2.poll() is None:
                                proc2.kill()
                            if proc1.poll() is None:
                                proc1.kill()
                            cos_interrupts += 1
                            interrupted = True
                            played_duration += time.time() - start_time
                            while is_cos_active() and not playback_interrupt.is_set():
                                if playback_token is not None and playback_token != current_playback_token:
                                    break
                                time.sleep(0.05)
                            break
                        else:
                            proc2.terminate()
                            proc1.terminate()
                            if proc2.poll() is None:
                                proc2.kill()
                            if proc1.poll() is None:
                                proc1.kill()
                            played_duration = total_duration
                            break
                    if playback_interrupt.is_set():
                        proc2.terminate()
                        proc1.terminate()
                        break
                    time.sleep(0.05)
                if proc2.poll() is None:
                    proc2.kill()
                if proc1.poll() is None:
                    proc1.kill()
                if not interrupted or cos_interrupts >= max_interrupts or playback_interrupt.is_set():
                    break
        else:
            try:
                proc = subprocess.Popen(
                    ['aplay', '-D', SOUND_DEVICE, filename],
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL
                )
            except Exception:
                pass
            else:
                try:
                    while proc.poll() is None:
                        if playback_token is not None and playback_token != current_playback_token:
                            proc.terminate()
                            break
                        if interruptible and is_cos_active():
                            proc.terminate()
                            time.sleep(0.2)
                            if proc.poll() is None:
                                proc.kill()
                            break
                        if playback_interrupt.is_set():
                            proc.terminate()
                            break
                        time.sleep(0.05)
                finally:
                    if proc.poll() is None:
                        proc.kill()
                    proc.wait()
    finally:
        currently_playing = ""
        GPIO.output(REMOTE_BUSY_PIN, not REMOTE_BUSY_ACTIVE_LEVEL)
        # print("RDB INACTIVE")  # For debugging

def play_code(code_str, interruptible=False, repeat=False, pausing=False):
    matches = [f for f in os.listdir(SOUND_DIRECTORY)
               if match_code_file(f, code_str, SOUND_FILE_EXTENSION)]
    if matches:
        filename = os.path.join(SOUND_DIRECTORY, matches[0])
        launch_playback_thread(play_sound, filename, interruptible, repeat, pausing)
    else:
        print(f"File {code_str}{SOUND_FILE_EXTENSION} not found.")

def parse_serial_command(command):
    m = re.match(r'^P(\d{4})([IRP]?)$', command.strip().upper())
    if not m:
        return None, None
    code_str, suffix = m.group(1), m.group(2)
    return code_str, suffix

def process_command(command):
    playback_interrupt.set()
    time.sleep(0.1)
    code_str, suffix = parse_serial_command(command)
    if code_str is None:
        print("Invalid command.")
        return
    interruptible = (suffix == "I")
    repeat = (suffix == "R")
    pausing = (suffix == "P")
    play_code(code_str, interruptible, repeat, pausing)

def serial_read_loop():
    global serial_buffer
    try:
        serial_port = serial.Serial(
            port=SERIAL_PORT,
            baudrate=SERIAL_BAUDRATE,
            timeout=SERIAL_TIMEOUT
        )
        serial_port.reset_input_buffer()
    except Exception:
        serial_port = None
    while True:
        try:
            if serial_port and serial_port.in_waiting:
                data = serial_port.read(serial_port.in_waiting)
                try:
                    decoded = data.decode('ascii')
                    cleaned = ''.join(c for c in decoded if c.isprintable())
                    serial_buffer += cleaned
                    for line in cleaned.splitlines():
                        if line.strip():
                            serial_history.insert(0, line.strip())
                            if len(serial_history) > 10:
                                serial_history.pop()
                except UnicodeDecodeError:
                    pass
        except Exception:
            pass
        time.sleep(0.05)

def process_serial_commands():
    global serial_buffer
    pattern = r'P\d{4}[IRP]?'
    while True:
        try:
            match = re.search(pattern, serial_buffer.upper())
            if match:
                command = match.group(0)
                process_command(command)
                serial_buffer = serial_buffer.replace(command, '', 1)
            time.sleep(0.1)
        except Exception:
            pass

def minimal_status_screen(stdscr):
    global REMOTE_BUSY_PIN, REMOTE_BUSY_ACTIVE_LEVEL, serial_history

    curses.curs_set(0)
    stdscr.nodelay(True)
    while True:
        stdscr.erase()
        y = 0

        # COS state
        cos_state = is_cos_active()
        cos_str = "ACTIVE" if cos_state else "INACTIVE"
        cos_color = curses.color_pair(2) if cos_state else curses.color_pair(1)
        stdscr.addstr(y, 0, f"COS: {cos_str}", cos_color)
        y += 1

        # Remote Busy state
        try:
            rdb_state = (GPIO.input(REMOTE_BUSY_PIN) == REMOTE_BUSY_ACTIVE_LEVEL)
        except Exception:
            rdb_state = False
        rdb_str = "ACTIVE" if rdb_state else "INACTIVE"
        rdb_color = curses.color_pair(2) if rdb_state else curses.color_pair(1)
        stdscr.addstr(y, 0, f"Remote Busy: {rdb_str}", rdb_color)
        y += 2

        # Serial Input
        stdscr.addstr(y, 0, "Serial Input (last 5):")
        y += 1
        for line in serial_history[:5]:
            stdscr.addstr(y, 0, line)
            y += 1

        stdscr.addstr(y+1, 0, "Press q to quit.", curses.color_pair(1))
        stdscr.refresh()

        try:
            if stdscr.getkey() == 'q':
                break
        except curses.error:
            pass
        time.sleep(0.25)

# To use:
# Make sure you have curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_BLACK)
# and curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK) somewhere before launching.

if __name__ == "__main__":
    import RPi.GPIO as GPIO

    # init color pairs
    def run_status():
        curses.initscr()
        curses.start_color()
        curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_BLACK)
        curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK)
        try:
            curses.wrapper(minimal_status_screen)
        finally:
            curses.endwin()

    run_status()

def main():
    try:
        threading.Thread(target=serial_read_loop, daemon=True).start()
        threading.Thread(target=process_serial_commands, daemon=True).start()
        print("DRX Simple Test Mode. Enter DRX commands (e.g. P5300, P5300I, P5300R, P5300P). Type 'exit' to quit.")
        while True:
            cmd = input("> ")
            if cmd.strip().lower() in ('exit', 'quit'):
                print("Exiting.")
                break
            process_command(cmd)
    finally:
        GPIO.output(REMOTE_BUSY_PIN, not REMOTE_BUSY_ACTIVE_LEVEL)
        GPIO.cleanup()

if __name__ == "__main__":
    main()