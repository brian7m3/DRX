#!/bin/bash

# DRX Control Script (with Log Rotation, Automatic Cleanup, and Auto-Rotate Interval)
# Usage: sudo drx-control [command] [service]
# Configure log cleanup and rotation interval via: sudo drx-control config

command=$1
service=$2

# Text formatting
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Log/config paths and variables
DRX_HOME="/home/drx/DRX"
LOGS_DIR="$DRX_HOME/logs"
CONFIG_FILE="$DRX_HOME/drx-control.conf"
ROTATE_STATE_DIR="$DRX_HOME/.rotate_state"
mkdir -p "$ROTATE_STATE_DIR"
mkdir -p "$LOGS_DIR"

# Defaults for main/web logs
LOG_RETENTION_DAYS=7
DELETE_OLD_LOGS=true
LOG_ROTATE_INTERVAL_HOURS=24

# Defaults for drx.log
DRX_RETENTION_DAYS=7
DRX_DELETE_OLD_LOGS=true
DRX_ROTATE_INTERVAL_HOURS=24

# Load config from file if it exists
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
fi

# Display header
echo -e "${BOLD}========================================${NC}"
echo -e "${BOLD}        DRX Control Utility            ${NC}"
echo -e "${BOLD}========================================${NC}"

# Function to show usage
show_usage() {
    echo -e "${YELLOW}Usage:${NC} sudo $0 [command] [service]"
    echo -e "${YELLOW}Commands:${NC}"
    echo "  start   - Start the service(s)"
    echo "  stop    - Stop the service(s)"
    echo "  restart - Restart the service(s)"
    echo "  status  - Show status of the service(s)"
    echo "  view    - View DRX status screen in tmux"
    echo "  log     - Show recent logs from the journal"
    echo "  rotate  - Rotate logs (backup and clear current log file)"
    echo "  config  - Configure log cleanup and rotation interval"
    echo -e "${YELLOW}Services:${NC}"
    echo "  main    - DRX Main Script"
    echo "  web     - DRX Web Interface"
    echo "  drx     - drx.log (special log)"
    echo "  all     - Both services (not valid with 'view' command)"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  sudo $0 start all     # Start both services"
    echo "  sudo $0 view main     # View main status screen"
    echo "  sudo $0 rotate main   # Backup and clear logs for main service and drx.log"
    echo "  sudo $0 rotate drx    # Only backup and clear drx.log"
    echo "  sudo $0 config        # Configure log cleanup and rotate interval"
}

# Function to check if tmux is installed
check_tmux() {
    if ! command -v tmux &> /dev/null; then
        echo -e "${RED}Error: tmux is not installed. Please install it with:${NC}"
        echo "sudo apt-get update && sudo apt-get install -y tmux"
        exit 1
    fi
}

# Function to view DRX in tmux
view_in_tmux() {
    local script_type=$1
    local session_name="drx_${script_type}_$(date +%s)"
    local script_path="$DRX_HOME/drx_${script_type}.py"

    check_tmux

    # Stop the service first
    echo -e "${YELLOW}Stopping drx_${script_type} service to run in view mode...${NC}"
    sudo systemctl stop drx_${script_type}

    # Create new tmux session
    echo -e "${YELLOW}Starting ${script_type} in tmux session...${NC}"

    # Display tmux controls
    echo -e "${BLUE}${BOLD}TMUX CONTROLS:${NC}"
    echo -e "  ${YELLOW}• Ctrl+B then D${NC} = Detach (leave DRX running but exit viewer)"
    echo -e "  ${YELLOW}• Ctrl+B then [${NC} = Scroll mode (use arrows/PageUp to scroll)"
    echo -e "  ${YELLOW}• Ctrl+B then ?${NC} = Show all tmux commands"
    echo -e "  ${YELLOW}• Ctrl+C${NC} = Exit DRX completely"
    echo ""
    echo -e "${BOLD}The service will restart automatically when you exit.${NC}"
    echo -e "${GREEN}Starting DRX ${script_type} status screen in 3 seconds...${NC}"
    sleep 3

    # Create tmux session
    sudo tmux new-session -d -s $session_name "cd $DRX_HOME && sudo python3 ${script_path}"

    # Attach to the session
    sudo tmux attach -t $session_name

    # After detaching or exiting, kill the session
    sudo tmux kill-session -t $session_name 2>/dev/null

    # Automatically restart the service
    echo -e "${YELLOW}Tmux session ended. Automatically restarting service...${NC}"
    sudo systemctl start drx_${script_type}
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Successfully restarted drx_${script_type} service${NC}"
    else
        echo -e "${RED}Failed to restart drx_${script_type} service${NC}"
    fi
}

# Function to delete old rotated logs
delete_old_logs() {
    local logtype=$1
    local now=$(date +%s)
    local deleted=0
    local pattern retention

    if [ "$logtype" = "main" ] || [ "$logtype" = "web" ]; then
        pattern="${LOGS_DIR}/drx_${logtype}_service.log.*"
        retention=$LOG_RETENTION_DAYS
        [ "$DELETE_OLD_LOGS" = true ] || return 0
    elif [ "$logtype" = "drx" ]; then
        pattern="${LOGS_DIR}/????-??-??_drx.log"
        retention=$DRX_RETENTION_DAYS
        [ "$DRX_DELETE_OLD_LOGS" = true ] || return 0
    else
        return 0
    fi

    for file in $pattern; do
        [ -f "$file" ] || continue
        local mtime=$(stat -c %Y "$file")
        local age_days=$(( (now - mtime) / 86400 ))
        if [ "$age_days" -gt "$retention" ]; then
            rm -f "$file"
            ((deleted++))
        fi
    done

    if [ "$deleted" -gt 0 ]; then
        echo -e "${GREEN}Deleted $deleted $logtype log(s) older than $retention days.${NC}"
    fi
}

# Function to rotate logs (main/web/drx)
rotate_logs() {
    local logtype=$1

    # Main/web logs as before
    if [ "$logtype" = "main" ] || [ "$logtype" = "web" ]; then
        local log_file="$LOGS_DIR/drx_${logtype}_service.log"
        if [ -f "$log_file" ]; then
            local file_size=$(du -h "$log_file" | cut -f1)
            echo -e "${YELLOW}Current log file size: ${file_size}${NC}"

            local timestamp=$(date +"%Y-%m-%d")
            local backup_file="${LOGS_DIR}/${timestamp}_drx_${logtype}.log"

            echo -e "${YELLOW}Creating backup: ${backup_file}${NC}"
            cp "$log_file" "$backup_file"

            echo -e "${YELLOW}Clearing current log file...${NC}"
            echo "# Log rotated on $(date)" > "$log_file"

            echo -e "${GREEN}${log_file} rotation complete. Backup saved as ${backup_file}${NC}"
        else
            echo -e "${RED}Log file not found: ${log_file}${NC}"
        fi
        # Also rotate drx.log if main is rotated
        if [ "$logtype" = "main" ]; then
            rotate_logs drx
        fi
    elif [ "$logtype" = "drx" ]; then
        local drxlog="$LOGS_DIR/drx.log"
        if [ -f "$drxlog" ]; then
            local drxlog_backup="${LOGS_DIR}/$(date +"%Y-%m-%d")_drx.log"
            echo -e "${YELLOW}Rotating ${drxlog} to ${drxlog_backup}${NC}"
            cp "$drxlog" "$drxlog_backup"
            echo "# Log rotated on $(date)" > "$drxlog"
            echo -e "${GREEN}drx.log rotation complete. Backup saved as ${drxlog_backup}${NC}"
        else
            echo -e "${RED}drx.log not found at ${drxlog}${NC}"
        fi
    fi

    # Delete old logs
    delete_old_logs "$logtype"
}

# Function to check and auto-rotate logs based on interval
auto_rotate_logs() {
    local logtype=$1
    local state_file="${ROTATE_STATE_DIR}/last_rotate_${logtype}.stamp"
    local now=$(date +%s)
    local interval_sec last_rotate=0

    if [ "$logtype" = "main" ] || [ "$logtype" = "web" ]; then
        interval_sec=$((LOG_ROTATE_INTERVAL_HOURS * 3600))
    elif [ "$logtype" = "drx" ]; then
        interval_sec=$((DRX_ROTATE_INTERVAL_HOURS * 3600))
    else
        return 0
    fi

    [ -f "$state_file" ] && last_rotate=$(cat "$state_file")

    if [ $((now - last_rotate)) -ge $interval_sec ]; then
        echo "$now" > "$state_file"
        echo -e "${YELLOW}Auto-rotating logs for $logtype (interval reached)...${NC}"
        rotate_logs "$logtype"
    fi
}

# Function to show recent logs (add drx.log support)
show_logs() {
    local svc=$1
    if [ "$svc" = "drx" ]; then
        local log_file="$LOGS_DIR/drx.log"
        echo -e "${YELLOW}Recent logs for drx.log:${NC}"
        if [ -f "$log_file" ]; then
            echo -e "${BLUE}=== File Log (${log_file}) ===${NC}"
            tail -n 50 "$log_file"
        else
            echo -e "${RED}drx.log not found.${NC}"
        fi
    else
        local log_file="$LOGS_DIR/drx_${svc}_service.log"
        echo -e "${YELLOW}Recent logs for drx_${svc}:${NC}"
        if [ -f "$log_file" ]; then
            echo -e "${BLUE}=== File Log (${log_file}) ===${NC}"
            tail -n 50 "$log_file"
        fi
        echo -e "\n${BLUE}=== System Journal ===${NC}"
        sudo journalctl -u drx_${svc} -n 50 --no-pager
    fi
}

# Function to handle service control and auto-rotation
service_control() {
    local cmd=$1
    local svc=$2
    local service_name="drx_${svc}"

    # Handle correct verb forms for messages
    if [ "$cmd" = "stop" ]; then
        actioning="Stopping"
        actioned="stopped"
    elif [ "$cmd" = "start" ]; then
        actioning="Starting"
        actioned="started"
    elif [ "$cmd" = "restart" ]; then
        actioning="Restarting"
        actioned="restarted"
    else
        actioning="${cmd^}ing"
        actioned="${cmd}ed"
    fi

    # Auto-rotate logs if interval reached
    auto_rotate_logs "$svc"

    case $cmd in
        start|stop|restart)
            echo -e "${YELLOW}${actioning} ${service_name}...${NC}"
            sudo systemctl $cmd $service_name
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}Successfully ${actioned} ${service_name}${NC}"
            else
                echo -e "${RED}Failed to ${cmd} ${service_name}${NC}"
            fi
            ;;
        status)
            echo -e "${YELLOW}Status of ${service_name}:${NC}"
            sudo systemctl status $service_name
            ;;
        view)
            view_in_tmux $svc
            ;;
        log)
            show_logs $svc
            ;;
        rotate)
            rotate_logs $svc
            # Update last-rotated timestamp
            echo "$(date +%s)" > "${ROTATE_STATE_DIR}/last_rotate_${svc}.stamp"
            ;;
        *)
            echo -e "${RED}Invalid command: ${cmd}${NC}"
            show_usage
            exit 1
            ;;
    esac
}

# Function for interactive log cleanup/config menu
log_cleanup_menu() {
    echo -e "${BLUE}Current log cleanup and rotation settings:${NC}"
    echo "  Main/Web logs:"
    echo "    Delete old logs after rotation: $DELETE_OLD_LOGS"
    echo "    Log retention days: $LOG_RETENTION_DAYS"
    echo "    Log auto-rotation interval (hours): $LOG_ROTATE_INTERVAL_HOURS"
    echo
    echo "  drx.log:"
    echo "    Delete old logs after rotation: $DRX_DELETE_OLD_LOGS"
    echo "    Log retention days: $DRX_RETENTION_DAYS"
    echo "    Log auto-rotation interval (hours): $DRX_ROTATE_INTERVAL_HOURS"
    echo

    read -p "Change main/web log deletion setting? (y/n): " change
    if [[ "$change" =~ ^[Yy]$ ]]; then
        read -p "Enable log deletion after rotation (true/false)? " new_delete
        read -p "How many days to keep logs? " new_days
        if [[ ! "$new_delete" =~ ^(true|false)$ ]]; then
            echo -e "${RED}Invalid value for delete setting. Must be 'true' or 'false'.${NC}"
            return 1
        fi
        if ! [[ "$new_days" =~ ^[0-9]+$ ]]; then
            echo -e "${RED}Invalid value for log retention days. Must be a positive integer.${NC}"
            return 1
        fi
        DELETE_OLD_LOGS="$new_delete"
        LOG_RETENTION_DAYS="$new_days"
    fi
    read -p "Change main/web rotation interval (hours)? (y/n): " change_interval
    if [[ "$change_interval" =~ ^[Yy]$ ]]; then
        read -p "How many hours between auto-rotations? " new_interval
        if ! [[ "$new_interval" =~ ^[0-9]+$ ]]; then
            echo -e "${RED}Invalid value for interval. Must be a positive integer.${NC}"
            return 1
        fi
        LOG_ROTATE_INTERVAL_HOURS="$new_interval"
    fi

    echo
    read -p "Change drx.log deletion setting? (y/n): " drx_change
    if [[ "$drx_change" =~ ^[Yy]$ ]]; then
        read -p "Enable drx.log deletion after rotation (true/false)? " drx_delete
        read -p "How many days to keep drx.log backups? " drx_days
        if [[ ! "$drx_delete" =~ ^(true|false)$ ]]; then
            echo -e "${RED}Invalid value for drx.log delete setting. Must be 'true' or 'false'.${NC}"
            return 1
        fi
        if ! [[ "$drx_days" =~ ^[0-9]+$ ]]; then
            echo -e "${RED}Invalid value for drx.log retention days. Must be a positive integer.${NC}"
            return 1
        fi
        DRX_DELETE_OLD_LOGS="$drx_delete"
        DRX_RETENTION_DAYS="$drx_days"
    fi
    read -p "Change drx.log rotation interval (hours)? (y/n): " drx_interval
    if [[ "$drx_interval" =~ ^[Yy]$ ]]; then
        read -p "How many hours between drx.log auto-rotations? " drx_rot_interval
        if ! [[ "$drx_rot_interval" =~ ^[0-9]+$ ]]; then
            echo -e "${RED}Invalid value for drx.log interval. Must be a positive integer.${NC}"
            return 1
        fi
        DRX_ROTATE_INTERVAL_HOURS="$drx_rot_interval"
    fi

    # Save all settings to config file
    cat > "$CONFIG_FILE" <<EOF
DELETE_OLD_LOGS=$DELETE_OLD_LOGS
LOG_RETENTION_DAYS=$LOG_RETENTION_DAYS
LOG_ROTATE_INTERVAL_HOURS=$LOG_ROTATE_INTERVAL_HOURS
DRX_DELETE_OLD_LOGS=$DRX_DELETE_OLD_LOGS
DRX_RETENTION_DAYS=$DRX_RETENTION_DAYS
DRX_ROTATE_INTERVAL_HOURS=$DRX_ROTATE_INTERVAL_HOURS
EOF
    echo -e "${GREEN}Settings saved to $CONFIG_FILE${NC}"
}

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}Please run as root (use sudo).${NC}"
    echo -e "${YELLOW}Example: sudo $0 $command $service${NC}"
    exit 1
fi

# Main logic - update to allow drx as a log type
if [ "$command" = "config" ]; then
    log_cleanup_menu
    exit 0
fi

if [ -z "$command" ] || [ -z "$service" ]; then
    show_usage
    exit 1
fi

case $service in
    main)
        service_control $command "main"
        ;;
    web)
        service_control $command "web"
        ;;
    drx)
        # Allow: sudo drx-control rotate drx, sudo drx-control log drx, etc.
        case $command in
            rotate)
                rotate_logs drx
                echo "$(date +%s)" > "${ROTATE_STATE_DIR}/last_rotate_drx.stamp"
                ;;
            log)
                show_logs drx
                ;;
            *)
                echo -e "${RED}Invalid command for drx.log: ${command}${NC}"
                show_usage
                exit 1
                ;;
        esac
        ;;
    all)
        if [[ "$command" = "view" ]]; then
            echo -e "${RED}Cannot view both services at once. Please specify 'main' or 'web'.${NC}"
            exit 1
        fi
        service_control $command "main"
        service_control $command "web"
        ;;
    *)
        echo -e "${RED}Invalid service: ${service}${NC}"
        show_usage
        exit 1
        ;;
esac
