import os
import time
import threading
import re
from datetime import datetime
from configparser import ConfigParser

# Add these to track last alert time
last_alert_time = None

def wx_alert_check(config, debug_log=None):
    """
    Check if weather alerts are enabled and if the alerts file exists.
    Compare the latest issued time to see if it's a new alert.
    
    Args:
        config: ConfigParser object containing the configuration
        debug_log: Debug logging function (optional)
        
    Returns:
        bool: True if alerts are enabled and a NEW alert exists, False otherwise
    """
    global last_alert_time
    
    try:
        # Check if weather alerts are enabled in config
        if config.has_section('WX') and config.getboolean('WX', 'alerts', fallback=False):
            # Check if the wx_alerts file exists
            wx_alerts_path = os.path.join(os.path.dirname(__file__), 'wx', 'wx_alerts')
            if os.path.exists(wx_alerts_path):
                # Read the file and check for latest issued time
                with open(wx_alerts_path, 'r') as f:
                    content = f.read()
                
                # Find all instances of "Issued:" pattern and get the last one
                # Pattern matches "  Issued:      2025-07-13 07:04:00" with flexible spacing
                issued_pattern = r'Issued:\s+(\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2})'
                matches = re.findall(issued_pattern, content)
                
                if matches:
                    # Get the last (most recent) issued time
                    latest_issued_time = matches[-1]
                    
                    debug_log(f"Latest alert issued time: {latest_issued_time}")
                    
                    # Check if this is a new alert
                    if latest_issued_time != last_alert_time:
                        last_alert_time = latest_issued_time
                        debug_log(f"New weather alert detected: {latest_issued_time}")
                        return True
                    else:
                        debug_log(f"Alert already processed: {latest_issued_time}")
                        return False
                else:
                    debug_log("No 'Issued:' timestamp found in wx_alerts file")
                    
    except Exception as e:
        debug_log(f"Error checking weather alerts: {e}")
    
    return False

def wx_alert_action(config, debug_log=None):
    """
    Perform actions when weather alert is detected.
    This function is called when wx_alerts file contains a new alert.
    
    Args:
        config: ConfigParser object containing the configuration
        debug_log: Debug logging function (optional)
    """
    try:
        wx_alerts_path = os.path.join(os.path.dirname(__file__), 'wx', 'wx_alerts')
        
        # Read the alerts file
        with open(wx_alerts_path, 'r') as f:
            alert_content = f.read()
        
        debug_log(f"WEATHER ALERT ACTION TRIGGERED: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # Extract alert details from the last alert in the file
        # Find all alert blocks
        alert_blocks = re.split(r'-{10,}', alert_content)
        
        # Get the last complete alert block
        for block in reversed(alert_blocks):
            if 'EAS Code:' in block and 'Issued:' in block:
                # Extract key information
                eas_match = re.search(r'EAS Code:\s+(\w+)', block)
                desc_match = re.search(r'Description:\s+(.+)', block)
                issued_match = re.search(r'Issued:\s+(\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2})', block)
                expires_match = re.search(r'Expires:\s+(\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2})', block)
                location_match = re.search(r'Location:\s+(.+)', block)
                
                if eas_match:
                    debug_log(f"Alert EAS Code: {eas_match.group(1)}")
                if desc_match:
                    debug_log(f"Alert Description: {desc_match.group(1)}")
                if expires_match:
                    debug_log(f"Alert Expires: {expires_match.group(1)}")
                if location_match:
                    debug_log(f"Alert Location: {location_match.group(1)}")
                
                # TODO: Add your specific alert actions here based on the alert type
                # Examples:
                # - If EAS Code is FFA (Flash Flood), trigger specific action
                # - If EAS Code is TOR (Tornado), trigger different action
                # - Update display with alert information
                # - Send notifications
                
                break
        
    except Exception as e:
        debug_log(f"Error processing weather alert: {e}")

def wx_alert_monitor(config, debug_log=None):
    """
    Monitor for weather alerts at the specified interval.
    This function runs in a separate thread.
    
    Args:
        config: ConfigParser object containing the configuration
        debug_log: Debug logging function (optional)
    """
    try:
        # Get the check interval from config (default to 5 minutes)
        interval_minutes = config.getint('WX', 'interval', fallback=5)
        interval_seconds = interval_minutes * 60
        
        debug_log(f"Weather alert monitoring started. Checking every {interval_minutes} minutes.")
        
        while True:
            if wx_alert_check(config, debug_log):
                wx_alert_action(config, debug_log)
            
            # Wait for the specified interval
            time.sleep(interval_seconds)
            
    except Exception as e:
        debug_log(f"Error in weather alert monitor: {e}")

def start_wx_alert_monitoring(config, debug_log=None):
    """
    Start the weather alert monitoring in a separate thread.
    Call this function from your main program initialization.
    
    Args:
        config: ConfigParser object containing the configuration
        debug_log: Debug logging function (optional)
    """
    try:
        # Only start monitoring if alerts are enabled
        if config.has_section('WX') and config.getboolean('WX', 'alerts', fallback=False):
            # Create and start the monitoring thread
            monitor_thread = threading.Thread(
                target=wx_alert_monitor,
                args=(config, debug_log),
                daemon=True,  # Thread will stop when main program exits
                name="WXAlertMonitor"
            )
            monitor_thread.start()
            debug_log("Weather alert monitoring thread started.")
        else:
            debug_log("Weather alerts are disabled in configuration.")
            # Do not start monitoring if alerts = false
            return
            
    except Exception as e:
        debug_log(f"Error starting weather alert monitoring: {e}")