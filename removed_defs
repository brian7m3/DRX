"""
def auto_alternate_series(command, interval_per_base=60):
    # interval_per_base should match the config for [Rotation] time in seconds
    bases, _, is_alt = parse_alternate_series(command)
    if not is_alt or not bases:
        debug_log("Not a valid alternate series command.")
        return

    key = tuple(sorted(bases))
    pointer = 0

    while True:
        current_base = bases[pointer]
        command_queue.put(command)
        debug_log(f"Played base {current_base}, waiting {interval_per_base} seconds before next base...")
        time.sleep(interval_per_base)
        pointer = (pointer + 1) % len(bases)
"""

"""
def build_number_sequence(number):
    # Returns a list of {"wav": wav_path} for the number, split into digits if needed
    wavs = []
    digits = [int(d) for d in str(number)]
    for d in digits:
        wav_path = os.path.join(EXTRA_SOUND_DIR, f"{d}.wav")
        wavs.append({"wav": wav_path})
    return wavs
"""

"""  
def check_wav_exists(wav_file, debug_log=None):
    """
    Check if a WAV file exists in the sounds directory.
    
    Args:
        wav_file: The WAV filename (can include subdirectory like 'extra/flash.wav')
        debug_log: Debug logging function (optional)
    
    Returns:
        bool: True if file exists, False otherwise
    """
    try:
        # Construct the full path
        if wav_file.startswith('extra/'):
            full_path = f"/DRX/sounds/{wav_file}"
        else:
            full_path = f"/DRX/sounds/{wav_file}"
        
        exists = os.path.exists(full_path)
        
        if not exists and debug_log:
            debug_log(f"WAV file not found: {full_path}")
        
        return exists
        
    except Exception as e:
        if debug_log:
            debug_log(f"Error checking WAV file existence: {e}")
        return False

def play_wav_file_with_check(wav_file, debug_log=None):
    """
    Wrapper function to play WAV file with existence check.
    
    Args:
        wav_file: The WAV filename to play
        debug_log: Debug logging function (optional)
    
    Returns:
        bool: True if file was played, False if not found
    """
    if check_wav_exists(wav_file, debug_log):
        play_wav_file(wav_file)
        return True
    else:
        debug_log(f"Cannot play missing WAV file: {wav_file}")
        return False
    """
    Wrapper function to play WAV file with existence check.
    
    Args:
        wav_file: The WAV filename to play
        debug_log: Debug logging function (optional)
    
    Returns:
        bool: True if file was played, False if not found
    """
    if check_wav_exists(wav_file, debug_log):
        play_wav_file(wav_file)
        return True
    else:
        debug_log(f"Cannot play missing WAV file: {wav_file}")
        return False
"""

""" 
def is_wx_alert_active():
    global ctone_override_expire
    now = time.time()
    try:
        return (ctone_override_expire is not None and now < ctone_override_expire)
    except Exception:
        return False    
"""
def handle_alternate_series(command):
    bases, suffixes, is_alt = parse_alternate_series(command)
    debug_log(f"ALTERNATE DEBUG: command={command}, bases={bases}, suffixes={suffixes}, is_alt={is_alt}")
    if not is_alt or not bases:
        debug_log("ALTERNATE DEBUG: Not an alternate command or no bases")
        return False

    key = tuple(bases)
    if key not in alternate_series_pointers:
        alternate_series_pointers[key] = 0

    pointer = alternate_series_pointers[key]
    base_to_play = bases[pointer]
    base_suffix = suffixes[pointer] if pointer < len(suffixes) else ""
    debug_log(f"ALTERNATE DEBUG: pointer={pointer}, base_to_play={base_to_play}, base_suffix={base_suffix}")

    repeat = 'R' in base_suffix
    pausing = 'P' in base_suffix
    interruptible = 'I' in base_suffix
    wait_for_cos = 'W' in base_suffix

    code_str = f"{base_to_play:04d}"
    debug_log(f"ALTERNATE DEBUG: code_str={code_str}, repeat={repeat}, pausing={pausing}, interruptible={interruptible}, wait_for_cos={wait_for_cos}")

    debug_log("About to call play_direct_track")
    # PATCH: Always pass a display_name with context for alternating series!
    # Find the file we will play, extract track_num and title for formatting.
    base_filename = get_next_base_file(base_to_play)
    if base_filename:
        import os
        track_filename = os.path.basename(base_filename)
        # Extract track_num and title
        # Handles "5308-Title.wav" or "P5300A5400-Title.wav"
        m = re.match(r'P?(\d+)', track_filename)
        track_num = m.group(1) if m else ""
        title = ""
        if "-" in track_filename:
            title = track_filename.split("-", 1)[1].rsplit(".", 1)[0]
        # Detect section type for more accurate context
        section_context = detect_section_context(base_filename)
        # Guess base_type for display
        base_type = ""
        if section_context:
            if "Rotating" in section_context:
                base_type = "Rotating Base"
            elif "Random" in section_context:
                base_type = "Random Base"
            elif "SudoRandom" in section_context:
                base_type = "SudoRandom Base"
            else:
                base_type = section_context
        else:
            base_type = "Base"
        base_num = base_to_play
        def format_currently_playing(track_num, title, base_type, base_num):
            if title:
                return f"{track_num}-{title} from {base_type} {base_num}"
            else:
                return f"{track_num} from {base_type} {base_num}"
        currently_playing_str = format_currently_playing(track_num, title, base_type, base_num)
        play_sound(
            filename=base_filename,
            interruptible=interruptible,
            pausing=pausing,
            repeating=repeat,
            wait_for_cos=wait_for_cos,
            display_name=currently_playing_str
        )
        alternate_series_pointers[key] = (pointer + 1) % len(bases)
        debug_log(f"ALTERNATE DEBUG: next pointer will be {alternate_series_pointers[key]}")
        return True
    else:
        debug_log(f"ALTERNATE DEBUG: No base file found for {base_to_play}")
        return False
