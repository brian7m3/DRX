import os
import sys
import json
import time
import shutil
import csv
import re
import configparser
from datetime import datetime
import threading

import requests
from urllib.request import urlopen, Request
from urllib.error import URLError, HTTPError
from bs4 import BeautifulSoup

# ---- CONFIGURATION ----

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
CONFIG_FILE = os.path.join(SCRIPT_DIR, "wx_config.ini")
SAME_CSV = os.path.join(SCRIPT_DIR, "same.csv")

def load_config():
    config = configparser.ConfigParser()
    config.read(CONFIG_FILE)
    # WEATHER SECTION
    wx_cfg = config['weather']
    wx_polling_time = int(wx_cfg.get('polling_time', '15')) * 60 # minutes to seconds
    wx_data_url = wx_cfg.get('wx_data_url', '')
    wx_day_url = wx_cfg.get('wx_day_url', '')
    nws_url = wx_cfg.get('nws_url', '')
    # SAME SECTION
    same_cfg = config['SAME Alerts']
    same_zip = same_cfg.get('zip_code', '').strip()
    same_polling_time = int(same_cfg.get('polling_time', '300')) # seconds
    same_user_agent = same_cfg.get('user_agent', 'WX-SAME-Script')
    return {
        "wx": {
            "directory": "/home/drx/DRX/wx/",
            "polling_time": wx_polling_time,
            "wx_data_url": wx_data_url,
            "wx_day_url": wx_day_url,
            "nws_url": nws_url
        },
        "same": {
            "zip_code": same_zip,
            "polling_time": same_polling_time,
            "user_agent": same_user_agent
        }
    }

# ---- WEATHER LOGIC ----

def fetch_nws_conditions_and_visibility(url):
    try:
        resp = requests.get(url, timeout=15)
        resp.raise_for_status()
        html = resp.text
        soup = BeautifulSoup(html, "html.parser")
        text_lines = soup.get_text('\n').splitlines()
        text_lines = [line.strip() for line in text_lines if line.strip()]
        conditions = "Unknown"
        visibility = "Unknown"
        for i, line in enumerate(text_lines):
            if "Â°F" in line or "&deg;F" in line:
                if i > 0:
                    conditions = text_lines[i-1].strip()
                break
        for i, line in enumerate(text_lines):
            if "Visibility" in line:
                if i+1 < len(text_lines):
                    vis_line = text_lines[i+1]
                    match = re.search(r'([0-9.]+)\s*m', vis_line)
                    if match:
                        visibility = match.group(1)
                break
        return conditions, visibility
    except Exception as e:
        print(f"[weather] Error fetching NWS conditions/visibility: {e}", file=sys.stderr)
        return "Unknown", "Unknown"

def get_json(url):
    try:
        resp = requests.get(url, timeout=15)
        resp.raise_for_status()
        return resp.json()
    except Exception as e:
        print(f"[weather] Error fetching JSON: {e}", file=sys.stderr)
        return {}

def get_nested(data, keys, default=None):
    for key in keys:
        if isinstance(data, list):
            if not data:
                return default
            data = data[-1]
        data = data.get(key) if isinstance(data, dict) else default
        if data is None:
            return default
    return data

def degrees_to_direction(degrees):
    try:
        deg = int(degrees)
    except (ValueError, TypeError):
        return "Unknown"
    dirs = [
        (0, 11, "N"), (11, 34, "NNE"), (34, 56, "NE"), (56, 79, "ENE"),
        (79, 101, "E"), (101, 124, "ESE"), (124, 146, "SE"), (146, 169, "SSE"),
        (169, 191, "S"), (191, 214, "SSW"), (214, 236, "SW"), (236, 259, "WSW"),
        (259, 281, "W"), (281, 304, "WNW"), (304, 326, "NW"), (326, 349, "NNW"),
        (349, 361, "N")
    ]
    for start, end, label in dirs:
        if start <= deg < end:
            return label
    return "Invalid"

def read_pressure_from_file(filepath):
    if not os.path.exists(filepath):
        return None
    with open(filepath, "r") as f:
        for line in f:
            if line.startswith("pressure: "):
                try:
                    value = line.split(":", 1)[1].strip().split()[0]
                    return float(value)
                except Exception:
                    return None
    return None

def weather_worker(wx_cfg):
    directory = wx_cfg["directory"]
    wx_data_url = wx_cfg["wx_data_url"]
    wx_day_url = wx_cfg["wx_day_url"]
    nws_url = wx_cfg["nws_url"]
    polling_time = wx_cfg["polling_time"]
    output_file = os.path.join(directory, "wx_data")
    backup_file = os.path.join(directory, "wx_data_previous")
    timestamp_file = os.path.join(directory, "wx_data_previous_time")

    os.makedirs(directory, exist_ok=True)

    while True:
        # Backup every 2 hrs
        current_time = time.time()
        backup_needed = True
        if os.path.exists(output_file):
            if os.path.exists(timestamp_file):
                try:
                    with open(timestamp_file, "r") as tf:
                        last_backup_time = float(tf.read().strip())
                    if current_time - last_backup_time < 7200:
                        backup_needed = False
                except Exception:
                    pass
            if backup_needed:
                try:
                    shutil.copy2(output_file, backup_file)
                    with open(timestamp_file, "w") as tf:
                        tf.write(str(current_time))
                except Exception as e:
                    print(f"[weather] Backup error: {e}", file=sys.stderr)

        nws_conditions, nws_visibility = fetch_nws_conditions_and_visibility(nws_url)
        wx_data_json = get_json(wx_data_url)
        wx_day_json = get_json(wx_day_url)

        observations = wx_day_json.get("observations", [])
        last_obs = observations[-1] if observations else {}

        temperature = get_nested(last_obs, ["imperial", "tempAvg"])
        humidity = get_nested(last_obs, ["humidityAvg"])
        winddir_deg = get_nested(last_obs, ["winddirAvg"])
        wind_speed = get_nested(last_obs, ["imperial", "windspeedAvg"])
        wind_gust = get_nested(last_obs, ["imperial", "windgustAvg"])
        pressure = get_nested(last_obs, ["imperial", "pressureMax"])

        precip_rate = None
        if wx_data_json.get("observations"):
            obs0 = wx_data_json["observations"][0]
            precip_rate = obs0.get("imperial", {}).get("precipRate")

        winddir = degrees_to_direction(winddir_deg)

        previous_pressure = read_pressure_from_file(backup_file)
        new_pressure = pressure
        baro_status = "unknown"
        if previous_pressure is not None and new_pressure is not None:
            try:
                previous_pressure = float(previous_pressure)
                new_pressure = float(new_pressure)
                if previous_pressure > new_pressure:
                    baro_status = "falling"
                elif previous_pressure < new_pressure:
                    baro_status = "rising"
                else:
                    baro_status = "steady"
            except Exception:
                baro_status = "unknown"

        output_data = {
            "observations": nws_conditions,
            "temperature": f"{temperature} degrees" if temperature is not None else "Unknown",
            "humidity": f"{humidity} percent" if humidity is not None else "Unknown",
            "winddir": winddir,
            "wind_speed": f"{wind_speed}" if wind_speed is not None else "Unknown",
            "wind_gust": f"{wind_gust}" if wind_gust is not None else "Unknown",
            "pressure": f"{pressure}" if pressure is not None else "Unknown",
            "pressure_status": baro_status,
            "visibility": f"{nws_visibility} miles" if nws_visibility != "Unknown" else "Unknown",
            "precipRate": f"{precip_rate:.2f}" if precip_rate is not None else "Unknown"
        }

        try:
            with open(output_file, "w") as f:
                for key, val in output_data.items():
                    f.write(f"{key}: {val}\n")
            os.chmod(output_file, 0o666)
            print(f"[weather] Weather data written to {output_file}")
        except Exception as e:
            print(f"[weather] Error writing weather data: {e}", file=sys.stderr)

        time.sleep(polling_time)

# ---- SAME ALERTS LOGIC ----

def load_eas_descriptions():
    descriptions = {}
    try:
        with open(SAME_CSV, 'r') as f:
            reader = csv.reader(f)
            for row in reader:
                if len(row) >= 2:
                    description = row[0].strip()
                    code = row[1].strip()
                    descriptions[code] = description
    except FileNotFoundError:
        print(f"Warning: same.csv not found in {SCRIPT_DIR}")
        print("Falling back to API descriptions.")
    except Exception as e:
        print(f"Warning: Error reading same.csv: {e}")
        print("Falling back to API descriptions.")
    return descriptions

def parse_nws_date(date_string):
    if not date_string:
        return "N/A"
    try:
        dt_obj = datetime.fromisoformat(date_string)
        return dt_obj.strftime('%Y-%m-%d %H:%M:%S')
    except (ValueError, TypeError):
        return date_string

def get_nws_zone_from_zip(zip_code, user_agent):
    headers = {'User-Agent': user_agent}
    geocode_url = f"https://api.zippopotam.us/us/{zip_code}"
    try:
        with urlopen(Request(geocode_url, headers=headers), timeout=10) as response:
            geocode_data = json.load(response)
            lat = geocode_data['places'][0]['latitude']
            lon = geocode_data['places'][0]['longitude']
    except (HTTPError, URLError, KeyError, IndexError) as e:
        return None, f"Could not get location data for ZIP {zip_code}. Reason: {e}"

    points_url = f"https://api.weather.gov/points/{lat},{lon}"
    try:
        with urlopen(Request(points_url, headers=headers), timeout=10) as response:
            points_data = json.load(response)
            # Use county for SAME/EAS, not forecastZone
            county_url = points_data.get('properties', {}).get('county')
            if county_url:
                zone_id = county_url.split('/')[-1]
                return zone_id, None
            else:
                return None, "Could not determine NWS county zone from API response."
    except (HTTPError, URLError) as e:
        return None, f"Could not contact NWS API for zone info. Reason: {e}"
    except KeyError:
        return None, "NWS API response for zone info was in an unexpected format."

def extract_same_code(properties):
    event_code = properties.get('eventCode')
    all_codes = []
    if isinstance(event_code, dict):
        same_codes = event_code.get('SAME', [])
        if same_codes and isinstance(same_codes, list):
            all_codes.extend(same_codes)
        if not all_codes:
            nws_codes = event_code.get('NationalWeatherService', [])
            if nws_codes and isinstance(nws_codes, list):
                all_codes.extend(nws_codes)
    elif isinstance(event_code, str):
        all_codes.append(event_code)
    return ', '.join(all_codes) if all_codes else 'N/A'

def get_original_same_code(alert, all_alerts):
    """Find the original SAME code if this is a follow-up/statement alert"""
    properties = alert.get('properties', {})
    refs = properties.get('references', [])
    if not refs:
        return None
    ref_ids = {ref.get('identifier') for ref in refs}
    for other_alert in all_alerts:
        other_id = other_alert.get('properties', {}).get('id')
        if other_id in ref_ids:
            orig_code = extract_same_code(other_alert.get('properties', {}))
            if orig_code:
                return orig_code
    return None

def get_description_from_code(code, eas_descriptions, properties):
    first_code = code.split(',')[0].strip()
    if first_code in eas_descriptions:
        return eas_descriptions[first_code]
    else:
        headline = properties.get('headline', '')
        if ' issued ' in headline:
            description = headline.split(' issued ')[0]
        elif ' remains in effect' in headline:
            description = headline.split(' remains in effect')[0]
        elif ' in effect' in headline:
            description = headline.split(' in effect')[0]
        else:
            description = properties.get('event', 'No description available.')
        return description

def write_alerts_to_file(alert_text):
    alerts_file = os.path.join(SCRIPT_DIR, 'wx_alerts')
    try:
        with open(alerts_file, 'a') as f:
            f.write(alert_text)
        os.chmod(alerts_file, 0o666)
    except Exception as e:
        print(f"Warning: Could not write to wx_alerts file: {e}")

def handle_no_alerts():
    alerts_file = os.path.join(SCRIPT_DIR, 'wx_alerts')
    previous_file = os.path.join(SCRIPT_DIR, 'wx_alerts_previous')
    if os.path.exists(alerts_file):
        try:
            if os.path.exists(previous_file):
                os.remove(previous_file)
            os.rename(alerts_file, previous_file)
            print("Previous alerts archived to wx_alerts_previous")
        except Exception as e:
            print(f"Warning: Could not rename wx_alerts file: {e}")

def check_for_active_alerts(zone_id, zip_code, user_agent, eas_descriptions):
    alerts_url = f"https://api.weather.gov/alerts/active?zone={zone_id}"
    headers = {'User-Agent': user_agent}
    try:
        with urlopen(Request(alerts_url, headers=headers), timeout=10) as response:
            alerts_data = json.load(response)
        active_alerts = alerts_data.get('features', [])
        current_time = time.strftime('%Y-%m-%d %H:%M:%S')
        if not active_alerts:
            print(f"[{current_time}] No active alerts for ZIP Code {zip_code} (Zone: {zone_id}).")
            handle_no_alerts()
        else:
            output_lines = []
            output_lines.append(f"\n--- Active Alerts for ZIP {zip_code} at {current_time} ---")
            for alert in active_alerts:
                properties = alert.get('properties', {})
                eas_code = extract_same_code(properties)
                event = properties.get('event', 'N/A')

                # --- SKIP SVS Severe Thunderstorm Warning updates/statements ---
                if eas_code == 'SVS' and event == 'Severe Thunderstorm Warning':
                    continue

                # ... (the rest of your output logic remains unchanged)
                description = get_description_from_code(eas_code, eas_descriptions, properties)
                same = eas_code
                headline = properties.get('headline', 'N/A')
                status = properties.get('status', 'N/A')
                severity = properties.get('severity', 'N/A')
                message_type = properties.get('messageType', 'N/A')
                nws_headline = properties.get('parameters', {}).get('NWSheadline', ['N/A'])
                if isinstance(nws_headline, list):
                    nws_headline = nws_headline[0]
                onset = parse_nws_date(properties.get('onset'))
                effective = parse_nws_date(properties.get('effective'))
                ends = parse_nws_date(properties.get('ends'))
                expires = parse_nws_date(properties.get('expires'))
                location = properties.get('areaDesc', 'N/A')
                nws_description = properties.get('description', 'N/A')
                alert_text = f"""
  Event:          {event}
  SAME:           {same}
  EAS Code:       {same}
  Headline:       {headline}
  NWSheadline:    {nws_headline}
  Status:         {status}
  Severity:       {severity}
  MessageType:    {message_type}
  Onset:          {onset}
  Effective:      {effective}
  Ends:           {ends}
  Expires:        {expires}
  Location:       {location}
  Description:    {description}
"""

                # Gather extra fields not in main list
                shown_fields = {
                    'event', 'same', 'eas code', 'headline', 'nwsheadline', 'status', 'severity',
                    'messagetype', 'onset', 'effective', 'ends', 'expires', 'location', 'description'
                }
                # areaDesc is mapped to Location, so treat as covered
                mapped_fields = {'areaDesc', 'Event', 'Headline', 'NWSheadline', 'Status', 'Severity',
                                 'MessageType', 'Onset', 'Effective', 'Ends', 'Expires', 'Location', 'Description'}
                extra_lines = []
                for key, value in properties.items():
                    key_label = key
                    if key == "areaDesc":
                        key_label = "Location"
                    if key_label.lower() in shown_fields or key in mapped_fields:
                        continue
                    if isinstance(value, list):
                        value = "; ".join(str(v) for v in value)
                    extra_lines.append(f"  {key_label}:       {value}")

                # Add extra fields if present
                if extra_lines:
                    alert_text += "\n" + "\n".join(extra_lines)

                # Add any fields not listed at the end, then append and finish as before
                output_lines.append(alert_text)
            output_lines.append("-" * 50)
            full_output = '\n'.join(output_lines)
            print(full_output)
            write_alerts_to_file(full_output + '\n')
    except (HTTPError, URLError) as e:
        print(f"An error occurred while checking for alerts: {e}")

def same_worker_single(zip_code, polling_time, eas_descriptions, user_agent):
    # Get NWS zone from zip
    if zip_code and zip_code.isdigit() and len(zip_code) == 5:
        zone, error_msg = get_nws_zone_from_zip(zip_code, user_agent)
        if error_msg:
            print(f"[SAME] Error: {error_msg}")
            return
        print(f"[SAME] Monitoring NWS Zone: {zone} for ZIP {zip_code}...")
    else:
        print(f"[SAME] Invalid ZIP code: {zip_code}. Skipping SAME monitoring.")
        return
    while True:
        check_for_active_alerts(zone, zip_code, user_agent, eas_descriptions)
        time.sleep(polling_time)

def same_worker(same_cfg):
    zip_code_field = same_cfg["zip_code"]
    polling_time = same_cfg["polling_time"]
    user_agent = same_cfg["user_agent"]
    eas_descriptions = load_eas_descriptions()
    zip_codes = [z.strip() for z in zip_code_field.split(",") if z.strip()]
    threads = []
    for zip_code in zip_codes:
        t = threading.Thread(target=same_worker_single, args=(zip_code, polling_time, eas_descriptions, user_agent), daemon=True)
        t.start()
        threads.append(t)
    # Wait for all threads (infinite loop, since .join() will never return)
    for t in threads:
        t.join()

# ---- MAIN ----

def main():
    cfg = load_config()
    wx_cfg = cfg["wx"]
    same_cfg = cfg["same"]
    print("[drx_wx] Starting weather and SAME polling threads.")
    wx_thread = threading.Thread(target=weather_worker, args=(wx_cfg,), daemon=True)
    same_thread = threading.Thread(target=same_worker, args=(same_cfg,), daemon=True)
    wx_thread.start()
    same_thread.start()
    try:
        while True:
            time.sleep(60)
    except KeyboardInterrupt:
        print("\n[drx_wx] Monitoring stopped by user.")

if __name__ == "__main__":
    main()